{
  "version": 3,
  "sources": ["../three/examples/jsm/misc/GPUComputationRenderer.js", "../three/examples/jsm/shaders/CopyShader.js", "../three/examples/jsm/postprocessing/Pass.js", "../three/examples/jsm/postprocessing/ShaderPass.js", "../three/examples/jsm/postprocessing/MaskPass.js", "../three/examples/jsm/postprocessing/EffectComposer.js", "../three/examples/jsm/postprocessing/RenderPass.js", "../three/examples/jsm/shaders/LuminosityHighPassShader.js", "../three/examples/jsm/postprocessing/UnrealBloomPass.js", "../threejs-toys/src/pointer.js", "../threejs-toys/src/three.js", "../threejs-toys/src/cursors/neon/index.js", "../threejs-toys/src/tools/color.js", "../threejs-toys/src/glsl/psrdnoise3.glsl", "../threejs-toys/src/cursors/particles/index.js", "../threejs-toys/src/tools/canvasTexture.js", "../threejs-toys/src/glsl/psrdnoise2.glsl", "../threejs-toys/src/backgrounds/noisy-lines/index.js", "../threejs-toys/src/backgrounds/butterflies/index.js", "../threejs-toys/src/backgrounds/swarm/index.js", "../threejs-toys/src/backgrounds/fishes/index.js"],
  "sourcesContent": ["import {\r\n\tCamera,\r\n\tClampToEdgeWrapping,\r\n\tDataTexture,\r\n\tFloatType,\r\n\tMesh,\r\n\tNearestFilter,\r\n\tPlaneGeometry,\r\n\tRGBAFormat,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\n\r\n/**\r\n * GPUComputationRenderer, based on SimulationRenderer by zz85\r\n *\r\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\r\n * for each compute element (texel)\r\n *\r\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\r\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\r\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\r\n *\r\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\r\n * as inputs to render the textures of the next frame.\r\n *\r\n * The render targets of the variables can be used as input textures for your visualization shaders.\r\n *\r\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\r\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\r\n *\r\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\r\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\r\n *\r\n * -------------\r\n *\r\n * Basic use:\r\n *\r\n * // Initialization...\r\n *\r\n * // Create computation renderer\r\n * const gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\r\n *\r\n * // Create initial state float textures\r\n * const pos0 = gpuCompute.createTexture();\r\n * const vel0 = gpuCompute.createTexture();\r\n * // and fill in here the texture data...\r\n *\r\n * // Add texture variables\r\n * const velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\r\n * const posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\r\n *\r\n * // Add variable dependencies\r\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\r\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\r\n *\r\n * // Add custom uniforms\r\n * velVar.material.uniforms.time = { value: 0.0 };\r\n *\r\n * // Check for completeness\r\n * const error = gpuCompute.init();\r\n * if ( error !== null ) {\r\n *\t\tconsole.error( error );\r\n  * }\r\n *\r\n *\r\n * // In each frame...\r\n *\r\n * // Compute!\r\n * gpuCompute.compute();\r\n *\r\n * // Update texture uniforms in your visualization materials with the gpu renderer output\r\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\r\n *\r\n * // Do your rendering\r\n * renderer.render( myScene, myCamera );\r\n *\r\n * -------------\r\n *\r\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\r\n * Note that the shaders can have multiple input textures.\r\n *\r\n * const myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\r\n * const myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\r\n *\r\n * const inputTexture = gpuCompute.createTexture();\r\n *\r\n * // Fill in here inputTexture...\r\n *\r\n * myFilter1.uniforms.theTexture.value = inputTexture;\r\n *\r\n * const myRenderTarget = gpuCompute.createRenderTarget();\r\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\r\n *\r\n * const outputRenderTarget = gpuCompute.createRenderTarget();\r\n *\r\n * // Now use the output texture where you want:\r\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\r\n *\r\n * // And compute each frame, before rendering to screen:\r\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\r\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\r\n *\r\n *\r\n *\r\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {WebGLRenderer} renderer The renderer\r\n  */\r\n\r\nclass GPUComputationRenderer {\r\n\r\n\tconstructor( sizeX, sizeY, renderer ) {\r\n\r\n\t\tthis.variables = [];\r\n\r\n\t\tthis.currentTextureIndex = 0;\r\n\r\n\t\tlet dataType = FloatType;\r\n\r\n\t\tconst scene = new Scene();\r\n\r\n\t\tconst camera = new Camera();\r\n\t\tcamera.position.z = 1;\r\n\r\n\t\tconst passThruUniforms = {\r\n\t\t\tpassThruTexture: { value: null }\r\n\t\t};\r\n\r\n\t\tconst passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\r\n\r\n\t\tconst mesh = new Mesh( new PlaneGeometry( 2, 2 ), passThruShader );\r\n\t\tscene.add( mesh );\r\n\r\n\r\n\t\tthis.setDataType = function ( type ) {\r\n\r\n\t\t\tdataType = type;\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\r\n\r\n\t\t\tconst material = this.createShaderMaterial( computeFragmentShader );\r\n\r\n\t\t\tconst variable = {\r\n\t\t\t\tname: variableName,\r\n\t\t\t\tinitialValueTexture: initialValueTexture,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tdependencies: null,\r\n\t\t\t\trenderTargets: [],\r\n\t\t\t\twrapS: null,\r\n\t\t\t\twrapT: null,\r\n\t\t\t\tminFilter: NearestFilter,\r\n\t\t\t\tmagFilter: NearestFilter\r\n\t\t\t};\r\n\r\n\t\t\tthis.variables.push( variable );\r\n\r\n\t\t\treturn variable;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setVariableDependencies = function ( variable, dependencies ) {\r\n\r\n\t\t\tvariable.dependencies = dependencies;\r\n\r\n\t\t};\r\n\r\n\t\tthis.init = function () {\r\n\r\n\t\t\tif ( renderer.capabilities.isWebGL2 === false && renderer.extensions.has( 'OES_texture_float' ) === false ) {\r\n\r\n\t\t\t\treturn 'No OES_texture_float support for float textures.';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\r\n\r\n\t\t\t\treturn 'No support for vertex shader textures.';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < this.variables.length; i ++ ) {\r\n\r\n\t\t\t\tconst variable = this.variables[ i ];\r\n\r\n\t\t\t\t// Creates rendertargets and initialize them with input texture\r\n\t\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\r\n\t\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\r\n\r\n\t\t\t\t// Adds dependencies uniforms to the ShaderMaterial\r\n\t\t\t\tconst material = variable.material;\r\n\t\t\t\tconst uniforms = material.uniforms;\r\n\r\n\t\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\t\tfor ( let d = 0; d < variable.dependencies.length; d ++ ) {\r\n\r\n\t\t\t\t\t\tconst depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\t\tif ( depVar.name !== variable.name ) {\r\n\r\n\t\t\t\t\t\t\t// Checks if variable exists\r\n\t\t\t\t\t\t\tlet found = false;\r\n\r\n\t\t\t\t\t\t\tfor ( let j = 0; j < this.variables.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\r\n\r\n\t\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( ! found ) {\r\n\r\n\t\t\t\t\t\t\t\treturn 'Variable dependency not found. Variable=' + variable.name + ', dependency=' + depVar.name;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\r\n\r\n\t\t\t\t\t\tmaterial.fragmentShader = '\\nuniform sampler2D ' + depVar.name + ';\\n' + material.fragmentShader;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentTextureIndex = 0;\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tthis.compute = function () {\r\n\r\n\t\t\tconst currentTextureIndex = this.currentTextureIndex;\r\n\t\t\tconst nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\r\n\r\n\t\t\tfor ( let i = 0, il = this.variables.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst variable = this.variables[ i ];\r\n\r\n\t\t\t\t// Sets texture dependencies uniforms\r\n\t\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\t\tconst uniforms = variable.material.uniforms;\r\n\r\n\t\t\t\t\tfor ( let d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\r\n\r\n\t\t\t\t\t\tconst depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Performs the computation for this variable\r\n\t\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentTextureIndex = nextTextureIndex;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentRenderTarget = function ( variable ) {\r\n\r\n\t\t\treturn variable.renderTargets[ this.currentTextureIndex ];\r\n\r\n\t\t};\r\n\r\n\t\tthis.getAlternateRenderTarget = function ( variable ) {\r\n\r\n\t\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tmesh.geometry.dispose();\r\n\t\t\tmesh.material.dispose();\r\n\r\n\t\t\tconst variables = this.variables;\r\n\r\n\t\t\tfor ( let i = 0; i < variables.length; i ++ ) {\r\n\r\n\t\t\t\tconst variable = variables[ i ];\r\n\r\n\t\t\t\tif ( variable.initialValueTexture ) variable.initialValueTexture.dispose();\r\n\r\n\t\t\t\tconst renderTargets = variable.renderTargets;\r\n\r\n\t\t\t\tfor ( let j = 0; j < renderTargets.length; j ++ ) {\r\n\r\n\t\t\t\t\tconst renderTarget = renderTargets[ j ];\r\n\t\t\t\t\trenderTarget.dispose();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction addResolutionDefine( materialShader ) {\r\n\r\n\t\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + ' )';\r\n\r\n\t\t}\r\n\r\n\t\tthis.addResolutionDefine = addResolutionDefine;\r\n\r\n\r\n\t\t// The following functions can be used to compute things manually\r\n\r\n\t\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\r\n\r\n\t\t\tuniforms = uniforms || {};\r\n\r\n\t\t\tconst material = new ShaderMaterial( {\r\n\t\t\t\tname: 'GPUComputationShader',\r\n\t\t\t\tuniforms: uniforms,\r\n\t\t\t\tvertexShader: getPassThroughVertexShader(),\r\n\t\t\t\tfragmentShader: computeFragmentShader\r\n\t\t\t} );\r\n\r\n\t\t\taddResolutionDefine( material );\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createShaderMaterial = createShaderMaterial;\r\n\r\n\t\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\r\n\r\n\t\t\tsizeXTexture = sizeXTexture || sizeX;\r\n\t\t\tsizeYTexture = sizeYTexture || sizeY;\r\n\r\n\t\t\twrapS = wrapS || ClampToEdgeWrapping;\r\n\t\t\twrapT = wrapT || ClampToEdgeWrapping;\r\n\r\n\t\t\tminFilter = minFilter || NearestFilter;\r\n\t\t\tmagFilter = magFilter || NearestFilter;\r\n\r\n\t\t\tconst renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\r\n\t\t\t\twrapS: wrapS,\r\n\t\t\t\twrapT: wrapT,\r\n\t\t\t\tminFilter: minFilter,\r\n\t\t\t\tmagFilter: magFilter,\r\n\t\t\t\tformat: RGBAFormat,\r\n\t\t\t\ttype: dataType,\r\n\t\t\t\tdepthBuffer: false\r\n\t\t\t} );\r\n\r\n\t\t\treturn renderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.createTexture = function () {\r\n\r\n\t\t\tconst data = new Float32Array( sizeX * sizeY * 4 );\r\n\t\t\tconst texture = new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\r\n\t\t\ttexture.needsUpdate = true;\r\n\t\t\treturn texture;\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderTexture = function ( input, output ) {\r\n\r\n\t\t\t// Takes a texture, and render out in rendertarget\r\n\t\t\t// input = Texture\r\n\t\t\t// output = RenderTarget\r\n\r\n\t\t\tpassThruUniforms.passThruTexture.value = input;\r\n\r\n\t\t\tthis.doRenderTarget( passThruShader, output );\r\n\r\n\t\t\tpassThruUniforms.passThruTexture.value = null;\r\n\r\n\t\t};\r\n\r\n\t\tthis.doRenderTarget = function ( material, output ) {\r\n\r\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\r\n\t\t\tconst currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\r\n\r\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification\r\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\r\n\t\t\tmesh.material = material;\r\n\t\t\trenderer.setRenderTarget( output );\r\n\t\t\trenderer.render( scene, camera );\r\n\t\t\tmesh.material = passThruShader;\r\n\r\n\t\t\trenderer.xr.enabled = currentXrEnabled;\r\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t\t// Shaders\r\n\r\n\t\tfunction getPassThroughVertexShader() {\r\n\r\n\t\t\treturn\t'void main()\t{\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'\tgl_Position = vec4( position, 1.0 );\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'}\\n';\r\n\r\n\t\t}\r\n\r\n\t\tfunction getPassThroughFragmentShader() {\r\n\r\n\t\t\treturn\t'uniform sampler2D passThruTexture;\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'void main() {\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'\tgl_FragColor = texture2D( passThruTexture, uv );\\n' +\r\n\t\t\t\t\t'\\n' +\r\n\t\t\t\t\t'}\\n';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { GPUComputationRenderer };\r\n", "/**\r\n * Full-screen textured quad shader\r\n */\r\n\r\nconst CopyShader = {\r\n\r\n\tname: 'CopyShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'opacity': { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float opacity;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\t\t\tgl_FragColor = opacity * texel;\r\n\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { CopyShader };\r\n", "import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tOrthographicCamera,\r\n\tMesh\r\n} from 'three';\r\n\r\nclass Pass {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.isPass = true;\r\n\r\n\t\t// if set to true, the pass is processed by the composer\r\n\t\tthis.enabled = true;\r\n\r\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t// if set to true, the pass clears its buffer before rendering\r\n\t\tthis.clear = false;\r\n\r\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t}\r\n\r\n\tsetSize( /* width, height */ ) {}\r\n\r\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t}\r\n\r\n\tdispose() {}\r\n\r\n}\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nconst _geometry = new BufferGeometry();\r\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\r\n\r\nclass FullScreenQuad {\r\n\r\n\tconstructor( material ) {\r\n\r\n\t\tthis._mesh = new Mesh( _geometry, material );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._mesh.geometry.dispose();\r\n\r\n\t}\r\n\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this._mesh, _camera );\r\n\r\n\t}\r\n\r\n\tget material() {\r\n\r\n\t\treturn this._mesh.material;\r\n\r\n\t}\r\n\r\n\tset material( value ) {\r\n\r\n\t\tthis._mesh.material = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Pass, FullScreenQuad };\r\n", "import {\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\n\r\nclass ShaderPass extends Pass {\r\n\r\n\tconstructor( shader, textureID ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\r\n\r\n\t\tif ( shader instanceof ShaderMaterial ) {\r\n\r\n\t\t\tthis.uniforms = shader.uniforms;\r\n\r\n\t\t\tthis.material = shader;\r\n\r\n\t\t} else if ( shader ) {\r\n\r\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tthis.material = new ShaderMaterial( {\r\n\r\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\r\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\r\n\t\t\t\tuniforms: this.uniforms,\r\n\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tif ( this.uniforms[ this.textureID ] ) {\r\n\r\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.material.dispose();\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShaderPass };\r\n", "import { Pass } from './Pass.js';\r\n\r\nclass MaskPass extends Pass {\r\n\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.clear = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.inverse = false;\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst context = renderer.getContext();\r\n\t\tconst state = renderer.state;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tstate.buffers.color.setMask( false );\r\n\t\tstate.buffers.depth.setMask( false );\r\n\r\n\t\t// lock buffers\r\n\r\n\t\tstate.buffers.color.setLocked( true );\r\n\t\tstate.buffers.depth.setLocked( true );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tlet writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tstate.buffers.stencil.setTest( true );\r\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tstate.buffers.stencil.setClear( clearValue );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.setRenderTarget( readBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\r\n\r\n\t\tstate.buffers.color.setLocked( false );\r\n\t\tstate.buffers.depth.setLocked( false );\r\n\r\n\t\tstate.buffers.color.setMask( true );\r\n\t\tstate.buffers.depth.setMask( true );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tstate.buffers.stencil.setLocked( false );\r\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\r\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ClearMaskPass extends Pass {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.needsSwap = false;\r\n\r\n\t}\r\n\r\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\trenderer.state.buffers.stencil.setLocked( false );\r\n\t\trenderer.state.buffers.stencil.setTest( false );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MaskPass, ClearMaskPass };\r\n", "import {\r\n\tClock,\r\n\tHalfFloatType,\r\n\tNoBlending,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { ShaderPass } from './ShaderPass.js';\r\nimport { MaskPass } from './MaskPass.js';\r\nimport { ClearMaskPass } from './MaskPass.js';\r\n\r\nclass EffectComposer {\r\n\r\n\tconstructor( renderer, renderTarget ) {\r\n\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst size = renderer.getSize( new Vector2() );\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\r\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._width = renderTarget.width;\r\n\t\t\tthis._height = renderTarget.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t\tthis.renderToScreen = true;\r\n\r\n\t\tthis.passes = [];\r\n\r\n\t\tthis.copyPass = new ShaderPass( CopyShader );\r\n\t\tthis.copyPass.material.blending = NoBlending;\r\n\r\n\t\tthis.clock = new Clock();\r\n\r\n\t}\r\n\r\n\tswapBuffers() {\r\n\r\n\t\tconst tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t}\r\n\r\n\taddPass( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\tinsertPass( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\tremovePass( pass ) {\r\n\r\n\t\tconst index = this.passes.indexOf( pass );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tthis.passes.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tisLastEnabledPass( passIndex ) {\r\n\r\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tif ( this.passes[ i ].enabled ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\trender( deltaTime ) {\r\n\r\n\t\t// deltaTime value is in seconds\r\n\r\n\t\tif ( deltaTime === undefined ) {\r\n\r\n\t\t\tdeltaTime = this.clock.getDelta();\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\r\n\r\n\t\tlet maskActive = false;\r\n\r\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst pass = this.passes[ i ];\r\n\r\n\t\t\tif ( pass.enabled === false ) continue;\r\n\r\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tconst context = this.renderer.getContext();\r\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( MaskPass !== undefined ) {\r\n\r\n\t\t\t\tif ( pass instanceof MaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\treset( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\r\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\r\n\r\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\r\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\r\n\t\tthis.copyPass.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EffectComposer };\r\n", "import {\r\n\tColor\r\n} from 'three';\r\nimport { Pass } from './Pass.js';\r\n\r\nclass RenderPass extends Pass {\r\n\r\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\t\tthis.clearColor = clearColor;\r\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\r\n\r\n\t\tthis.clear = true;\r\n\t\tthis.clearDepth = false;\r\n\t\tthis.needsSwap = false;\r\n\t\tthis._oldClearColor = new Color();\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet oldClearAlpha, oldOverrideMaterial;\r\n\r\n\t\tif ( this.overrideMaterial !== undefined ) {\r\n\r\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\r\n\r\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\t\toldClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearDepth ) {\r\n\r\n\t\t\trenderer.clearDepth();\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.overrideMaterial !== undefined ) {\r\n\r\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderPass };\r\n", "import {\r\n\tColor\r\n} from 'three';\r\n\r\n/**\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\r\n\r\nconst LuminosityHighPassShader = {\r\n\r\n\tshaderID: 'luminosityHighPass',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'luminosityThreshold': { value: 1.0 },\r\n\t\t'smoothWidth': { value: 1.0 },\r\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\r\n\t\t'defaultOpacity': { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform vec3 defaultColor;\r\n\t\tuniform float defaultOpacity;\r\n\t\tuniform float luminosityThreshold;\r\n\t\tuniform float smoothWidth;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\t\t\tfloat v = dot( texel.xyz, luma );\r\n\r\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\r\n\r\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\r\n\r\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { LuminosityHighPassShader };\r\n", "import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tHalfFloatType,\r\n\tMeshBasicMaterial,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\r\n\r\n/**\r\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\r\n * mip map chain of bloom textures and blurs them with different radii. Because\r\n * of the weighted combination of mips, and because larger blurs are done on\r\n * higher mips, this effect provides good quality and performance.\r\n *\r\n * Reference:\r\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n */\r\nclass UnrealBloomPass extends Pass {\r\n\r\n\tconstructor( resolution, strength, radius, threshold ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\r\n\t\tthis.radius = radius;\r\n\t\tthis.threshold = threshold;\r\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\t\t// create color only once here, reuse it later inside the render function\r\n\t\tthis.clearColor = new Color( 0, 0, 0 );\r\n\r\n\t\t// render targets\r\n\t\tthis.renderTargetsHorizontal = [];\r\n\t\tthis.renderTargetsVertical = [];\r\n\t\tthis.nMips = 5;\r\n\t\tlet resx = Math.round( this.resolution.x / 2 );\r\n\t\tlet resy = Math.round( this.resolution.y / 2 );\r\n\r\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\r\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\r\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\r\n\r\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\r\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t\t// luminosity high pass material\r\n\r\n\t\tconst highPassShader = LuminosityHighPassShader;\r\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\r\n\r\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\r\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\r\n\r\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\r\n\t\t\tuniforms: this.highPassUniforms,\r\n\t\t\tvertexShader: highPassShader.vertexShader,\r\n\t\t\tfragmentShader: highPassShader.fragmentShader\r\n\t\t} );\r\n\r\n\t\t// gaussian blur materials\r\n\r\n\t\tthis.separableBlurMaterials = [];\r\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\r\n\t\tresx = Math.round( this.resolution.x / 2 );\r\n\t\tresy = Math.round( this.resolution.y / 2 );\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t\t// composite material\r\n\r\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\r\n\r\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\r\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\r\n\r\n\t\t// blend material\r\n\r\n\t\tconst copyShader = CopyShader;\r\n\r\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\r\n\t\tthis.blendMaterial = new ShaderMaterial( {\r\n\t\t\tuniforms: this.copyUniforms,\r\n\t\t\tvertexShader: copyShader.vertexShader,\r\n\t\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\ttransparent: true\r\n\t\t} );\r\n\r\n\t\tthis.enabled = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis._oldClearColor = new Color();\r\n\t\tthis.oldClearAlpha = 1;\r\n\r\n\t\tthis.basic = new MeshBasicMaterial();\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( null );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTargetBright.dispose();\r\n\r\n\t\t//\r\n\r\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.compositeMaterial.dispose();\r\n\t\tthis.blendMaterial.dispose();\r\n\t\tthis.basic.dispose();\r\n\r\n\t\t//\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tlet resx = Math.round( width / 2 );\r\n\t\tlet resy = Math.round( height / 2 );\r\n\r\n\t\tthis.renderTargetBright.setSize( resx, resy );\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\r\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.setClearColor( this.clearColor, 0 );\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t// Render input to screen\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.basic;\r\n\t\t\tthis.basic.map = readBuffer.texture;\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\r\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetBright );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n\t\tlet inputRenderTarget = this.renderTargetBright;\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// Composite All the mips\r\n\r\n\t\tthis.fsQuad.material = this.compositeMaterial;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// Blend it additively over the input texture\r\n\r\n\t\tthis.fsQuad.material = this.blendMaterial;\r\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// Restore renderer settings\r\n\r\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n\tgetSeperableBlurMaterial( kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'colorTexture': { value: null },\r\n\t\t\t\t'invSize': { value: new Vector2( 0.5, 0.5 ) }, // inverse texture size\r\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`#include <common>\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tuniform sampler2D colorTexture;\r\n\t\t\t\tuniform vec2 invSize;\r\n\t\t\t\tuniform vec2 direction;\r\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\r\n\t\t\t\t\t\tfloat x = float(i);\r\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tgetCompositeMaterial( nMips ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t'NUM_MIPS': nMips\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'blurTexture1': { value: null },\r\n\t\t\t\t'blurTexture2': { value: null },\r\n\t\t\t\t'blurTexture3': { value: null },\r\n\t\t\t\t'blurTexture4': { value: null },\r\n\t\t\t\t'blurTexture5': { value: null },\r\n\t\t\t\t'bloomStrength': { value: 1.0 },\r\n\t\t\t\t'bloomFactors': { value: null },\r\n\t\t\t\t'bloomTintColors': { value: null },\r\n\t\t\t\t'bloomRadius': { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tuniform sampler2D blurTexture1;\r\n\t\t\t\tuniform sampler2D blurTexture2;\r\n\t\t\t\tuniform sampler2D blurTexture3;\r\n\t\t\t\tuniform sampler2D blurTexture4;\r\n\t\t\t\tuniform sampler2D blurTexture5;\r\n\t\t\t\tuniform float bloomStrength;\r\n\t\t\t\tuniform float bloomRadius;\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\r\n\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { UnrealBloomPass };\r\n", "import { Vector2 } from 'three'\n\n/**\n * Pointer helper\n * @author Kevin Levron <kevin.levron@gmail.com>\n */\nexport default function (params) {\n  const {\n    domElement,\n    onClick = () => {},\n    onEnter = () => {},\n    onMove = () => {},\n    onLeave = () => {},\n    onDragStart = () => {},\n    onDragMove = () => {},\n    onDragStop = () => {}\n  } = params\n\n  const position = new Vector2()\n  const nPosition = new Vector2()\n  const startPosition = new Vector2()\n  const lastPosition = new Vector2()\n  const delta = new Vector2()\n\n  const obj = { position, nPosition, hover: false, down: false, removeListeners }\n\n  addListeners()\n\n  return obj\n\n  function pointerClick (e) {\n    if (startPosition.distanceTo(position) < 20) {\n      // console.log('pointerClick')\n      updatePosition(e)\n      onClick({ position, nPosition })\n    }\n  }\n\n  function pointerEnter (e) {\n    // console.log('pointerEnter', e)\n    obj.hover = e.pointerType === 'mouse'\n    updatePosition(e)\n    onEnter({ position, nPosition })\n  }\n\n  function pointerDown (e) {\n    // console.log('pointerDown')\n    obj.down = true\n    updatePosition(e)\n    startPosition.copy(position)\n    lastPosition.copy(position)\n    onDragStart({ position, nPosition })\n  }\n\n  function pointerMove (e) {\n    // console.log('pointerMove')\n    updatePosition(e)\n    delta.copy(position).sub(lastPosition)\n    if (obj.down) {\n      onDragMove({ position, nPosition, startPosition, lastPosition, delta })\n    } else {\n      if (!obj.hover) obj.hover = true\n    }\n    onMove({ position, nPosition, startPosition, lastPosition, delta })\n    lastPosition.copy(position)\n  }\n\n  function pointerUp (e) {\n    // console.log('pointerUp')\n    obj.down = false\n    onDragStop()\n  }\n\n  function pointerLeave (e) {\n    // console.log('pointerLeave')\n    if (obj.down) {\n      obj.down = false\n      onDragStop()\n    }\n    obj.hover = false\n    onLeave()\n  }\n\n  function updatePosition (e) {\n    const rect = domElement.getBoundingClientRect()\n    position.x = e.clientX - rect.left\n    position.y = e.clientY - rect.top\n    nPosition.x = (position.x / rect.width) * 2 - 1\n    nPosition.y = -(position.y / rect.height) * 2 + 1\n  }\n\n  function addListeners () {\n    domElement.addEventListener('click', pointerClick)\n    domElement.addEventListener('pointerenter', pointerEnter)\n    domElement.addEventListener('pointerdown', pointerDown)\n    domElement.addEventListener('pointermove', pointerMove)\n    domElement.addEventListener('pointerup', pointerUp)\n    domElement.addEventListener('pointerleave', pointerLeave)\n  }\n\n  function removeListeners () {\n    domElement.removeEventListener('click', pointerClick)\n    domElement.removeEventListener('pointerenter', pointerEnter)\n    domElement.removeEventListener('pointerdown', pointerDown)\n    domElement.removeEventListener('pointermove', pointerMove)\n    domElement.removeEventListener('pointerup', pointerUp)\n    domElement.removeEventListener('pointerleave', pointerLeave)\n  }\n}\n", "import {\n  AmbientLight,\n  DirectionalLight,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nimport pointer from './pointer'\n\nexport default function (params) {\n  const options = {\n    el: null,\n    canvas: null,\n    eventsEl: null,\n    width: null,\n    height: null,\n    resize: true,\n    alpha: false,\n    antialias: false,\n    orbitControls: false,\n    init () {},\n    initCamera () {},\n    initScene () {},\n    afterResize () {},\n    beforeRender () {},\n    ...params\n  }\n\n  const three = {\n    renderer: null,\n    camera: null,\n    scene: null,\n    pointer: null,\n    width: 0,\n    height: 0,\n    wWidth: 0,\n    wHeight: 0,\n    clock: {\n      startTime: 0,\n      time: 0,\n      elapsed: 0\n    },\n    options\n  }\n\n  let render\n\n  let cameraCtrl\n\n  init()\n\n  return three\n\n  function init () {\n    let canvas\n    if (options.el) {\n      canvas = document.createElement('canvas')\n      options.el.appendChild(canvas)\n    } else if (options.canvas) {\n      canvas = options.canvas\n    } else {\n      throw new Error('Missing parameter : el or canvas is required')\n    }\n\n    options.init?.(three)\n\n    three.renderer = new WebGLRenderer({ canvas, alpha: options.alpha, antialias: options.antialias })\n    options.initRenderer?.(three)\n\n    three.camera = new PerspectiveCamera()\n    three.camera.position.z = 50\n    options.initCamera?.(three)\n\n    if (options.orbitControls) {\n      cameraCtrl = new OrbitControls(three.camera, options.eventsEl ?? three.renderer.domElement)\n      cameraCtrl.enableDamping = true\n      cameraCtrl.dampingFactor = 0.1\n      if (typeof options.orbitControls === 'object') {\n        Object.keys(options.orbitControls).forEach(key => {\n          cameraCtrl[key] = options.orbitControls[key]\n        })\n      }\n    }\n\n    resize()\n    if (options.resize && !options.width && !options.height) {\n      window.addEventListener('resize', resize)\n    }\n\n    three.scene = new Scene()\n    options.initScene?.(three)\n\n    initPointer()\n\n    render = options.render ? options.render : () => { three.renderer.render(three.scene, three.camera) }\n\n    requestAnimationFrame(timestamp => {\n      three.clock.startTime = three.clock.time = timestamp\n      requestAnimationFrame(animate)\n    })\n  }\n\n  function initPointer () {\n    const pointerOptions = {}\n    if (options.onPointerEnter) { pointerOptions.onEnter = options.onPointerEnter }\n    if (options.onPointerMove) { pointerOptions.onMove = options.onPointerMove }\n    if (options.onPointerMove) { pointerOptions.onLeave = options.onPointerLeave }\n    if (Object.keys(pointerOptions).length > 0) {\n      three.pointer = pointer({ domElement: options.eventsEl ?? (options.el ?? options.canvas), ...pointerOptions })\n    }\n  }\n\n  function animate (timestamp) {\n    const { clock } = three\n    clock.elapsed = timestamp - clock.time\n    clock.time = timestamp\n\n    options.beforeRender(three)\n\n    if (cameraCtrl) cameraCtrl.update()\n\n    render(three)\n    requestAnimationFrame(animate)\n  }\n\n  function resize () {\n    if (options.width && options.height) {\n      three.width = options.width\n      three.height = options.height\n    } else if (options.resize === 'window') {\n      three.width = window.innerWidth\n      three.height = window.innerHeight\n    } else {\n      const parent = three.renderer.domElement.parentElement\n      three.width = parent.clientWidth\n      three.height = parent.clientHeight\n    }\n\n    three.renderer.setSize(three.width, three.height)\n    three.camera.aspect = three.width / three.height\n    three.camera.updateProjectionMatrix()\n    if (three.camera instanceof PerspectiveCamera) {\n      const wsize = getCameraViewSize()\n      three.wWidth = wsize[0]; three.wHeight = wsize[1]\n    } else {\n      three.wWidth = three.camera.top - three.camera.bottom\n      three.wHeight = three.camera.right - three.camera.left\n    }\n    options.afterResize?.(three)\n  }\n\n  function getCameraViewSize () {\n    const vFOV = (three.camera.fov * Math.PI) / 180\n    const h = 2 * Math.tan(vFOV / 2) * Math.abs(three.camera.position.z)\n    const w = h * three.camera.aspect\n    return [w, h]\n  }\n}\n\nexport function commonConfig (params) {\n  const config = {}\n  const keys = ['el', 'canvas', 'eventsEl', 'width', 'height', 'resize', 'orbitControls']\n  keys.forEach(key => {\n    if (params[key] !== undefined) config[key] = params[key]\n  })\n  return config\n}\n\nexport function initLights (scene, lightsConfig) {\n  const lights = []\n  if (Array.isArray(lightsConfig) && lightsConfig.length > 0) {\n    let light\n    lightsConfig.forEach(lightConfig => {\n      switch (lightConfig.type) {\n        case 'ambient':\n          light = new AmbientLight(...lightConfig.params)\n          break\n        case 'directional':\n          light = new DirectionalLight(...lightConfig.params)\n          break\n        case 'point':\n          light = new PointLight(...lightConfig.params)\n          break\n        default:\n          console.error(`Unknown light type ${lightConfig.type}`)\n      }\n      if (light) {\n        if (typeof lightConfig.props === 'object') {\n          Object.keys(lightConfig.props).forEach(key => {\n            if (key === 'position') {\n              light.position.set(...lightConfig.props[key])\n            } else light[key] = lightConfig.props[key]\n          })\n        }\n        scene.add(light)\n        lights.push(light)\n      }\n    })\n  }\n  return lights\n}\n", "import { Color, Mesh, OrthographicCamera, PlaneGeometry, ShaderMaterial, SplineCurve, Vector2, Vector3 } from 'three'\nimport three from '../../three'\n\nconst defaultConfig = {\n  shaderPoints: 8,\n  curvePoints: 80,\n  curveLerp: 0.75,\n  radius1: 3,\n  radius2: 5,\n  velocityTreshold: 10,\n  sleepRadiusX: 150,\n  sleepRadiusY: 150,\n  sleepTimeCoefX: 0.0025,\n  sleepTimeCoefY: 0.0025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const points = new Array(config.curvePoints).fill(0).map(() => new Vector2())\n  const spline = new SplineCurve(points)\n\n  const velocity = new Vector3()\n  const velocityTarget = new Vector3()\n\n  const uRatio = { value: new Vector2() }\n  const uSize = { value: new Vector2() }\n  const uPoints = { value: new Array(config.shaderPoints).fill(0).map(() => new Vector2()) }\n  const uColor = { value: new Color(0xff00ff) }\n\n  let material\n  let plane\n  let hover = false\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: false,\n    initCamera (three) {\n      three.camera = new OrthographicCamera()\n    },\n    initScene ({ scene }) {\n      const geometry = new PlaneGeometry(2, 2)\n      material = new ShaderMaterial({\n        uniforms: { uRatio, uSize, uPoints, uColor },\n        defines: {\n          SHADER_POINTS: config.shaderPoints\n        },\n        vertexShader: `\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = vec4(position, 1.0);\n          }\n        `,\n        fragmentShader: `\n          // https://www.shadertoy.com/view/wdy3DD\n          // https://www.shadertoy.com/view/MlKcDD\n          // Signed distance to a quadratic bezier\n          float sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C) {\n            vec2 a = B - A;\n            vec2 b = A - 2.0*B + C;\n            vec2 c = a * 2.0;\n            vec2 d = A - pos;\n            float kk = 1.0 / dot(b,b);\n            float kx = kk * dot(a,b);\n            float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n            float kz = kk * dot(d,a);\n            float res = 0.0;\n            float p = ky - kx*kx;\n            float p3 = p*p*p;\n            float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n            float h = q*q + 4.0*p3;\n            if(h >= 0.0){\n              h = sqrt(h);\n              vec2 x = (vec2(h, -h) - q) / 2.0;\n              vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n              float t = uv.x + uv.y - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 1 root\n              vec2 qos = d + (c + b*t)*t;\n              res = length(qos);\n            } else {\n              float z = sqrt(-p);\n              float v = acos( q/(p*z*2.0) ) / 3.0;\n              float m = cos(v);\n              float n = sin(v)*1.732050808;\n              vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 3 roots\n              vec2 qos = d + (c + b*t.x)*t.x;\n              float dis = dot(qos,qos);\n              res = dis;\n              qos = d + (c + b*t.y)*t.y;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              qos = d + (c + b*t.z)*t.z;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              res = sqrt( res );\n            }\n            return res;\n          }\n\n          uniform vec2 uRatio;\n          uniform vec2 uSize;\n          uniform vec2 uPoints[SHADER_POINTS];\n          uniform vec3 uColor;\n          varying vec2 vUv;\n          void main() {\n            float intensity = 1.0;\n            float radius = 0.015;\n\n            vec2 pos = (vUv - 0.5) * uRatio;\n\n            vec2 c = (uPoints[0] + uPoints[1]) / 2.0;\n            vec2 c_prev;\n            float dist = 10000.0;\n            for(int i = 0; i < SHADER_POINTS - 1; i++){\n              c_prev = c;\n              c = (uPoints[i] + uPoints[i + 1]) / 2.0;\n              dist = min(dist, sdBezier(pos, c_prev, uPoints[i], c));\n            }\n            dist = max(0.0, dist);\n\n            float glow = pow(uSize.y / dist, intensity);\n            vec3 col = vec3(0.0);\n            col += 10.0 * vec3(smoothstep(uSize.x, 0.0, dist));\n            col += glow * uColor;\n\n            // Tone mapping\n            col = 1.0 - exp(-col);\n            col = pow(col, vec3(0.4545));\n  \n            gl_FragColor = vec4(col, 1.0);\n          }\n        `\n      })\n      plane = new Mesh(geometry, material)\n      scene.add(plane)\n    },\n    afterResize ({ width, height }) {\n      uSize.value.set(config.radius1, config.radius2)\n      if (width >= height) {\n        uRatio.value.set(1, height / width)\n        uSize.value.multiplyScalar(1 / width)\n      } else {\n        uRatio.value.set(width / height, 1)\n        uSize.value.multiplyScalar(1 / height)\n      }\n    },\n    beforeRender ({ clock, width, height, wWidth }) {\n      for (let i = 1; i < config.curvePoints; i++) {\n        points[i].lerp(points[i - 1], config.curveLerp)\n      }\n      for (let i = 0; i < config.shaderPoints; i++) {\n        spline.getPoint(i / (config.shaderPoints - 1), uPoints.value[i])\n      }\n\n      if (!hover) {\n        const t1 = clock.time * config.sleepTimeCoefX\n        const t2 = clock.time * config.sleepTimeCoefY\n        const cos = Math.cos(t1)\n        const sin = Math.sin(t2)\n        const r1 = config.sleepRadiusX * wWidth / width\n        const r2 = config.sleepRadiusY * wWidth / width\n        const x = r1 * cos\n        const y = r2 * sin\n        spline.points[0].set(x, y)\n        uColor.value.r = 0.5 + 0.5 * Math.cos(clock.time * 0.0015)\n        uColor.value.g = 0\n        uColor.value.b = 1 - uColor.value.r\n      } else {\n        uColor.value.r = velocity.z\n        uColor.value.g = 0\n        uColor.value.b = 1 - velocity.z\n        velocity.multiplyScalar(0.95)\n      }\n    },\n    onPointerMove ({ nPosition, delta }) {\n      hover = true\n      const x = (0.5 * nPosition.x) * uRatio.value.x\n      const y = (0.5 * nPosition.y) * uRatio.value.y\n      spline.points[0].set(x, y)\n\n      velocityTarget.x = Math.min(velocity.x + Math.abs(delta.x) / config.velocityTreshold, 1)\n      velocityTarget.y = Math.min(velocity.y + Math.abs(delta.y) / config.velocityTreshold, 1)\n      velocityTarget.z = Math.sqrt(velocityTarget.x * velocityTarget.x + velocityTarget.y * velocityTarget.y)\n      velocity.lerp(velocityTarget, 0.05)\n    },\n    onPointerLeave () {\n      hover = false\n    }\n  })\n\n  return { config }\n}\n", "import { Color } from 'three'\r\n\r\nexport function colorScale (colors) {\r\n  let range = []\r\n  setColors(colors)\r\n\r\n  const dummy = new Color()\r\n\r\n  return { setColors, getColorAt }\r\n\r\n  function setColors (colors) {\r\n    range = []\r\n    colors.forEach(color => {\r\n      range.push(new Color(color))\r\n    })\r\n  }\r\n\r\n  function getColorAt (progress) {\r\n    const p = Math.max(0, Math.min(1, progress)) * (colors.length - 1)\r\n    const i1 = Math.floor(p)\r\n    const c1 = range[i1]\r\n    if (i1 === colors.length - 1) {\r\n      return c1.getHex()\r\n    }\r\n    const p1 = p - i1\r\n    const c2 = range[i1 + 1]\r\n\r\n    dummy.r = c1.r + p1 * (c2.r - c1.r)\r\n    dummy.g = c1.g + p1 * (c2.g - c1.g)\r\n    dummy.b = c1.b + p1 * (c2.b - c1.b)\r\n    return dummy.clone()\r\n  }\r\n}\r\n", "//\r\n// psrdnoise3.glsl\r\n//\r\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\r\n// and Ian McEwan (ijm567@gmail.com)\r\n// Version 2021-12-02, published under the MIT license (see below)\r\n//\r\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the \"Software\"),\r\n// to deal in the Software without restriction, including without limitation\r\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n// and/or sell copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n//\r\n// Periodic (tiling) 3-D simplex noise (tetrahedral lattice gradient noise)\r\n// with rotating gradients and analytic derivatives.\r\n//\r\n// This is (yet) another variation on simplex noise. Unlike previous\r\n// implementations, the grid is axis-aligned to permit rectangular tiling.\r\n// The noise pattern can be made to tile seamlessly to any integer periods\r\n// up to 289 units in the x, y and z directions. Specifying a longer\r\n// period than 289 will result in errors in the noise field.\r\n//\r\n// This particular version of 3-D noise also implements animation by rotating\r\n// the generating gradient at each lattice point around a pseudo-random axis.\r\n// The rotating gradients give the appearance of a swirling motion, and\r\n// can serve a similar purpose for animation as motion along the fourth\r\n// dimension in 4-D noise. \r\n//\r\n// The rotating gradients in conjunction with the built-in ability to\r\n// compute exact analytic derivatives allow for \"flow noise\" effects\r\n// as presented by Ken Perlin and Fabrice Neyret.\r\n//\r\n\r\n// Use Perlin's rotated grid instead of the new tiling grid?\r\n// Enabling this adds about 1% to the execution time and\r\n// requires all periods to be multiples of 3. Other\r\n// integer periods can be specified, but when not evenly\r\n// divisible by 3, the actual period will be 3 times longer.\r\n// Take care not to overstep the maximum allowed period (288).\r\n//#define PERLINGRID\r\n\r\n// Enable faster gradient rotations?\r\n// Enabling this saves about 10% on execution time,\r\n// but the function will not run faster for alpha = 0.\r\n//#define FASTROTATION\r\n\r\n\r\n// Permutation polynomial for the hash value\r\nvec4 permute(vec4 x) {\r\n     vec4 xm = mod(x, 289.0);\r\n     return mod(((xm*34.0)+10.0)*xm, 289.0);\r\n}\r\n\r\n//\r\n// 3-D tiling simplex noise with rotating gradients and first order\r\n// analytical derivatives.\r\n// \"vec3 x\" is the point (x,y,z) to evaluate\r\n// \"vec3 period\" is the desired periods along x,y,z, up to 289.\r\n// (If Perlin's grid is used, multiples of 3 up to 288 are allowed.)\r\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\r\n// The \"float\" return value is the noise value, and\r\n// the \"out vec3 gradient\" argument returns the x,y,z partial derivatives.\r\n//\r\n// The function executes 15-20% faster if alpha is constant == 0.0\r\n// across all fragments being executed in parallel.\r\n// (This speedup will not happen if FASTROTATION is enabled. Do not specify\r\n// FASTROTATION if you are not actually going to use the rotation.)\r\n//\r\n// Setting any period to 0.0 or a negative value will skip the periodic\r\n// wrap for that dimension. Setting all periods to 0.0 makes the function\r\n// execute 10-15% faster.\r\n//\r\n// Not using the return value for the gradient will make the compiler\r\n// eliminate the code for computing it. This speeds up the function by\r\n// around 10%.\r\n//\r\nfloat psrdnoise(vec3 x, vec3 period, float alpha, out vec3 gradient)\r\n{\r\n\r\n#ifndef PERLINGRID\r\n  // Transformation matrices for the axis-aligned simplex grid\r\n  const mat3 M = mat3(0.0, 1.0, 1.0,\r\n                      1.0, 0.0, 1.0,\r\n                      1.0, 1.0, 0.0);\r\n\r\n  const mat3 Mi = mat3(-0.5, 0.5, 0.5,\r\n                        0.5,-0.5, 0.5,\r\n                        0.5, 0.5,-0.5);\r\n#endif\r\n\r\n  vec3 uvw;\r\n\r\n  // Transform to simplex space (tetrahedral grid)\r\n#ifndef PERLINGRID\r\n  // Use matrix multiplication, let the compiler optimise\r\n  uvw = M * x;\r\n#else\r\n  // Optimised transformation to uvw (slightly faster than\r\n  // the equivalent matrix multiplication on most platforms)\r\n  uvw = x + dot(x, vec3(1.0/3.0));\r\n#endif\r\n\r\n  // Determine which simplex we're in, i0 is the \"base corner\"\r\n  vec3 i0 = floor(uvw);\r\n  vec3 f0 = fract(uvw); // coords within \"skewed cube\"\r\n\r\n  // To determine which simplex corners are closest, rank order the\r\n  // magnitudes of u,v,w, resolving ties in priority order u,v,w,\r\n  // and traverse the four corners from largest to smallest magnitude.\r\n  // o1, o2 are offsets in simplex space to the 2nd and 3rd corners.\r\n  vec3 g_ = step(f0.xyx, f0.yzz); // Makes comparison \"less-than\"\r\n  vec3 l_ = 1.0 - g_;             // complement is \"greater-or-equal\"\r\n  vec3 g = vec3(l_.z, g_.xy);\r\n  vec3 l = vec3(l_.xy, g_.z);\r\n  vec3 o1 = min( g, l );\r\n  vec3 o2 = max( g, l );\r\n\r\n  // Enumerate the remaining simplex corners\r\n  vec3 i1 = i0 + o1;\r\n  vec3 i2 = i0 + o2;\r\n  vec3 i3 = i0 + vec3(1.0);\r\n\r\n  vec3 v0, v1, v2, v3;\r\n\r\n  // Transform the corners back to texture space\r\n#ifndef PERLINGRID\r\n  v0 = Mi * i0;\r\n  v1 = Mi * i1;\r\n  v2 = Mi * i2;\r\n  v3 = Mi * i3;\r\n#else\r\n  // Optimised transformation (mostly slightly faster than a matrix)\r\n  v0 = i0 - dot(i0, vec3(1.0/6.0));\r\n  v1 = i1 - dot(i1, vec3(1.0/6.0));\r\n  v2 = i2 - dot(i2, vec3(1.0/6.0));\r\n  v3 = i3 - dot(i3, vec3(1.0/6.0));\r\n#endif\r\n\r\n  // Compute vectors to each of the simplex corners\r\n  vec3 x0 = x - v0;\r\n  vec3 x1 = x - v1;\r\n  vec3 x2 = x - v2;\r\n  vec3 x3 = x - v3;\r\n\r\n  if(any(greaterThan(period, vec3(0.0)))) {\r\n    // Wrap to periods and transform back to simplex space\r\n    vec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);\r\n    vec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);\r\n    vec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);\r\n\t// Wrap to periods where specified\r\n\tif(period.x > 0.0) vx = mod(vx, period.x);\r\n\tif(period.y > 0.0) vy = mod(vy, period.y);\r\n\tif(period.z > 0.0) vz = mod(vz, period.z);\r\n    // Transform back\r\n#ifndef PERLINGRID\r\n    i0 = M * vec3(vx.x, vy.x, vz.x);\r\n    i1 = M * vec3(vx.y, vy.y, vz.y);\r\n    i2 = M * vec3(vx.z, vy.z, vz.z);\r\n    i3 = M * vec3(vx.w, vy.w, vz.w);\r\n#else\r\n    v0 = vec3(vx.x, vy.x, vz.x);\r\n    v1 = vec3(vx.y, vy.y, vz.y);\r\n    v2 = vec3(vx.z, vy.z, vz.z);\r\n    v3 = vec3(vx.w, vy.w, vz.w);\r\n    // Transform wrapped coordinates back to uvw\r\n    i0 = v0 + dot(v0, vec3(1.0/3.0));\r\n    i1 = v1 + dot(v1, vec3(1.0/3.0));\r\n    i2 = v2 + dot(v2, vec3(1.0/3.0));\r\n    i3 = v3 + dot(v3, vec3(1.0/3.0));\r\n#endif\r\n\t// Fix rounding errors\r\n    i0 = floor(i0 + 0.5);\r\n    i1 = floor(i1 + 0.5);\r\n    i2 = floor(i2 + 0.5);\r\n    i3 = floor(i3 + 0.5);\r\n  }\r\n\r\n  // Compute one pseudo-random hash value for each corner\r\n  vec4 hash = permute( permute( permute( \r\n              vec4(i0.z, i1.z, i2.z, i3.z ))\r\n            + vec4(i0.y, i1.y, i2.y, i3.y ))\r\n            + vec4(i0.x, i1.x, i2.x, i3.x ));\r\n\r\n  // Compute generating gradients from a Fibonacci spiral on the unit sphere\r\n  vec4 theta = hash * 3.883222077;  // 2*pi/golden ratio\r\n  vec4 sz    = hash * -0.006920415 + 0.996539792; // 1-(hash+0.5)*2/289\r\n  vec4 psi   = hash * 0.108705628 ; // 10*pi/289, chosen to avoid correlation\r\n\r\n  vec4 Ct = cos(theta);\r\n  vec4 St = sin(theta);\r\n  vec4 sz_prime = sqrt( 1.0 - sz*sz ); // s is a point on a unit fib-sphere\r\n\r\n  vec4 gx, gy, gz;\r\n\r\n  // Rotate gradients by angle alpha around a pseudo-random ortogonal axis\r\n#ifdef FASTROTATION\r\n  // Fast algorithm, but without dynamic shortcut for alpha = 0\r\n  vec4 qx = St;         // q' = norm ( cross(s, n) )  on the equator\r\n  vec4 qy = -Ct; \r\n  vec4 qz = vec4(0.0);\r\n\r\n  vec4 px =  sz * qy;   // p' = cross(q, s)\r\n  vec4 py = -sz * qx;\r\n  vec4 pz = sz_prime;\r\n\r\n  psi += alpha;         // psi and alpha in the same plane\r\n  vec4 Sa = sin(psi);\r\n  vec4 Ca = cos(psi);\r\n\r\n  gx = Ca * px + Sa * qx;\r\n  gy = Ca * py + Sa * qy;\r\n  gz = Ca * pz + Sa * qz;\r\n#else\r\n  // Slightly slower algorithm, but with g = s for alpha = 0, and a\r\n  // useful conditional speedup for alpha = 0 across all fragments\r\n  if(alpha != 0.0) {\r\n    vec4 Sp = sin(psi);          // q' from psi on equator\r\n    vec4 Cp = cos(psi);\r\n\r\n    vec4 px = Ct * sz_prime;     // px = sx\r\n    vec4 py = St * sz_prime;     // py = sy\r\n    vec4 pz = sz;\r\n\r\n    vec4 Ctp = St*Sp - Ct*Cp;    // q = (rotate( cross(s,n), dot(s,n))(q')\r\n    vec4 qx = mix( Ctp*St, Sp, sz);\r\n    vec4 qy = mix(-Ctp*Ct, Cp, sz);\r\n    vec4 qz = -(py*Cp + px*Sp);\r\n\r\n    vec4 Sa = vec4(sin(alpha));       // psi and alpha in different planes\r\n    vec4 Ca = vec4(cos(alpha));\r\n\r\n    gx = Ca * px + Sa * qx;\r\n    gy = Ca * py + Sa * qy;\r\n    gz = Ca * pz + Sa * qz;\r\n  }\r\n  else {\r\n    gx = Ct * sz_prime;  // alpha = 0, use s directly as gradient\r\n    gy = St * sz_prime;\r\n    gz = sz;  \r\n  }\r\n#endif\r\n\r\n  // Reorganize for dot products below\r\n  vec3 g0 = vec3(gx.x, gy.x, gz.x);\r\n  vec3 g1 = vec3(gx.y, gy.y, gz.y);\r\n  vec3 g2 = vec3(gx.z, gy.z, gz.z);\r\n  vec3 g3 = vec3(gx.w, gy.w, gz.w);\r\n\r\n  // Radial decay with distance from each simplex corner\r\n  vec4 w = 0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\r\n  w = max(w, 0.0);\r\n  vec4 w2 = w * w;\r\n  vec4 w3 = w2 * w;\r\n\r\n  // The value of the linear ramp from each of the corners\r\n  vec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));\r\n\r\n  // Multiply by the radial decay and sum up the noise value\r\n  float n = dot(w3, gdotx);\r\n\r\n  // Compute the first order partial derivatives\r\n  vec4 dw = -6.0 * w2 * gdotx;\r\n  vec3 dn0 = w3.x * g0 + dw.x * x0;\r\n  vec3 dn1 = w3.y * g1 + dw.y * x1;\r\n  vec3 dn2 = w3.z * g2 + dw.z * x2;\r\n  vec3 dn3 = w3.w * g3 + dw.w * x3;\r\n  gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);\r\n\r\n  // Scale the return value to fit nicely into the range [-1,1]\r\n  return 39.5 * n;\r\n}", "import { AdditiveBlending, BufferAttribute, BufferGeometry, Color, HalfFloatType, MathUtils, Points, ShaderMaterial, Vector2 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\nimport three from '../../three'\nimport { colorScale } from '../../tools/color'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 256,\n  colors: [0x00ff00, 0x0000ff],\n  color: 0xff0000,\n  coordScale: 1.5,\n  noiseIntensity: 0.001,\n  noiseTimeCoef: 0.0001,\n  pointSize: 5,\n  pointDecay: 0.005,\n  sleepRadiusX: 250,\n  sleepRadiusY: 250,\n  sleepTimeCoefX: 0.001,\n  sleepTimeCoefY: 0.002\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTime = { value: 0 }\n  const uCoordScale = { value: config.coordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uPointSize = { value: config.pointSize }\n  const uPointDecay = { value: config.pointDecay }\n  const uColor = { value: new Color(config.color) }\n  const uMouse = { value: new Vector2() }\n  const uMouseDirection = { value: new Vector2() }\n  const uniforms = { uTime, uCoordScale, uNoiseIntensity, uPointSize, uPointDecay, uColor, uMouse, uMouseDirection }\n\n  let geometry, material, mesh\n\n  let hover = false\n  const mouseTarget = new Vector2()\n\n  three({\n    ...commonConfig(params),\n    antialias: false,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initScene ({ scene }) {\n      initParticles()\n      scene.add(mesh)\n    },\n    beforeRender ({ width, wWidth, wHeight, clock, pointer }) {\n      if (!hover) {\n        const t1 = clock.time * config.sleepTimeCoefX\n        const t2 = clock.time * config.sleepTimeCoefY\n        const cos = Math.cos(t1)\n        const sin = Math.sin(t2)\n        const r1 = config.sleepRadiusX * wWidth / width\n        const r2 = config.sleepRadiusY * wWidth / width\n        mouseTarget.x = r1 * cos\n        mouseTarget.y = r2 * sin\n      } else {\n        mouseTarget.x = pointer.nPosition.x * 0.5 * wWidth\n        mouseTarget.y = pointer.nPosition.y * 0.5 * wHeight\n      }\n      uMouse.value.lerp(mouseTarget, 0.05)\n\n      uTime.value = clock.time * config.noiseTimeCoef\n      gpu.compute()\n      material.uniforms.texturePosition.value = gpu.getCurrentRenderTarget(positionVariable).texture\n      material.uniforms.textureVelocity.value = gpu.getCurrentRenderTarget(velocityVariable).texture\n    },\n    onPointerMove ({ delta }) {\n      hover = true\n      uMouseDirection.value.copy(delta)\n    },\n    onPointerLeave () {\n      hover = false\n    }\n  })\n\n  return { config, uniforms }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uNoiseIntensity;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        if (pos.w < 0.0) {\n          vel.x = 0.0;\n          vel.y = 0.0;\n          vel.z = 0.0;\n        } else {\n          vec3 grad;\n          vec3 p = vec3(0.0);\n          float n = psrdnoise(pos.xyz * uCoordScale, p, uTime, grad);\n          vel.xyz += grad * uNoiseIntensity * pos.w;\n        }\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      uniform float uPointDecay;\n      uniform vec2 uMouse;\n      uniform vec2 uMouseDirection;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        if (pos.w < 0.0) { pos.w = vel.w; }\n        pos.w -= uPointDecay;\n        if (pos.w <= 0.0) {\n          pos.xy = uMouse.xy;\n          pos.z = 0.0;\n        } else {\n          pos.xyz += vel.xyz;\n        }\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(uniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      console.error(error)\n    }\n  }\n\n  /**\n   */\n  function initParticles () {\n    geometry = new BufferGeometry()\n    const positions = new Float32Array(COUNT * 3)\n    const uvs = new Float32Array(COUNT * 2)\n    const colors = new Float32Array(COUNT * 3)\n\n    for (let i = 0; i < COUNT * 3; i += 3) {\n      positions[i] = 0\n      positions[i + 1] = 0\n      positions[i + 2] = 0\n    }\n\n    let index = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        uvs[index++] = i / (WIDTH - 1)\n        uvs[index++] = j / (WIDTH - 1)\n      }\n    }\n\n    const cscale = colorScale(config.colors)\n    for (let i = 0; i < COUNT * 3; i += 3) {\n      const color = cscale.getColorAt(Math.random())\n      colors[i] = color.r\n      colors[i + 1] = color.g\n      colors[i + 2] = color.b\n    }\n\n    geometry.setAttribute('position', new BufferAttribute(positions, 3))\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2))\n    geometry.setAttribute('color', new BufferAttribute(colors, 3))\n\n    material = new ShaderMaterial({\n      blending: AdditiveBlending,\n      depthTest: false,\n      transparent: true,\n      vertexColors: true,\n      uniforms: {\n        texturePosition: { value: null },\n        textureVelocity: { value: null },\n        uPointSize,\n        uColor\n      },\n      vertexShader: `\n        uniform sampler2D texturePosition;\n        uniform sampler2D textureVelocity;\n        uniform float uPointSize;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          vCol = color;\n          vPos = texture2D(texturePosition, uv);\n          vVel = texture2D(textureVelocity, uv);\n          vec4 mvPosition = modelViewMatrix * vec4(vPos.xyz, 1.0);\n          // gl_PointSize = smoothstep(0.0, 2.0, vPos.w) * uPointSize;\n          gl_PointSize = vPos.w * (vVel.w + 0.5) * uPointSize;\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 uColor;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          float dist = length(gl_PointCoord - 0.5);\n          if (dist > 0.5) discard;\n          // float a = smoothstep(0.0, 1.0, vPos.w);\n          gl_FragColor = vec4(mix(vCol, uColor, vPos.w), vPos.w);\n        }\n      `\n    })\n\n    mesh = new Points(geometry, material)\n    mesh.matrixAutoUpdate = false\n    mesh.updateMatrix()\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(1)\n      posArray[k + 1] = rndFS(1)\n      posArray[k + 2] = -100000\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = 0 // rndFS(0.2)\n      velArray[k + 1] = 0 // rndFS(0.2)\n      velArray[k + 2] = 0 // rndFS(0.2)\n      velArray[k + 3] = rnd(0.1, 1)\n    }\n  }\n}\n\n/**\n */\nfunction commonConfig (params) {\n  const config = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) config[key] = params[key]\n  })\n  return config\n}\n", "import { CanvasTexture } from 'three'\r\n\r\nconst defaultConfig = {\r\n  width: 256,\r\n  height: 256\r\n}\r\n\r\nexport default function (params) {\r\n  const config = { ...defaultConfig, ...params }\r\n\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = config.width\r\n  canvas.height = config.height\r\n\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  const texture = new CanvasTexture(ctx.canvas)\r\n\r\n  return { canvas, ctx, texture }\r\n}\r\n", "//\r\n// psrdnoise2.glsl\r\n//\r\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\r\n// and Ian McEwan (ijm567@gmail.com)\r\n// Version 2021-12-02, published under the MIT license (see below)\r\n//\r\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the \"Software\"),\r\n// to deal in the Software without restriction, including without limitation\r\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n// and/or sell copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n//\r\n// Periodic (tiling) 2-D simplex noise (hexagonal lattice gradient noise)\r\n// with rotating gradients and analytic derivatives.\r\n//\r\n// This is (yet) another variation on simplex noise. Unlike previous\r\n// implementations, the grid is axis-aligned and slightly stretched in\r\n// the y direction to permit rectangular tiling.\r\n// The noise pattern can be made to tile seamlessly to any integer period\r\n// in x and any even integer period in y. Odd periods may be specified\r\n// for y, but then the actual tiling period will be twice that number.\r\n//\r\n// The rotating gradients give the appearance of a swirling motion, and\r\n// can serve a similar purpose for animation as motion along z in 3-D\r\n// noise. The rotating gradients in conjunction with the analytic\r\n// derivatives allow for \"flow noise\" effects as presented by Ken\r\n// Perlin and Fabrice Neyret.\r\n//\r\n\r\n\r\n//\r\n// 2-D tiling simplex noise with rotating gradients and analytical derivative.\r\n// \"vec2 x\" is the point (x,y) to evaluate,\r\n// \"vec2 period\" is the desired periods along x and y, and\r\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\r\n// The \"float\" return value is the noise value, and\r\n// the \"out vec2 gradient\" argument returns the x,y partial derivatives.\r\n//\r\n// Setting either period to 0.0 or a negative value will skip the wrapping\r\n// along that dimension. Setting both periods to 0.0 makes the function\r\n// execute about 15% faster.\r\n//\r\n// Not using the return value for the gradient will make the compiler\r\n// eliminate the code for computing it. This speeds up the function\r\n// by 10-15%.\r\n//\r\n// The rotation by alpha uses one single addition. Unlike the 3-D version\r\n// of psrdnoise(), setting alpha == 0.0 gives no speedup.\r\n//\r\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient) {\r\n\r\n\t// Transform to simplex space (axis-aligned hexagonal grid)\r\n\tvec2 uv = vec2(x.x + x.y*0.5, x.y);\r\n\r\n\t// Determine which simplex we're in, with i0 being the \"base\"\r\n\tvec2 i0 = floor(uv);\r\n\tvec2 f0 = fract(uv);\r\n\t// o1 is the offset in simplex space to the second corner\r\n\tfloat cmp = step(f0.y, f0.x);\r\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\r\n\r\n\t// Enumerate the remaining simplex corners\r\n\tvec2 i1 = i0 + o1;\r\n\tvec2 i2 = i0 + vec2(1.0, 1.0);\r\n\r\n\t// Transform corners back to texture space\r\n\tvec2 v0 = vec2(i0.x - i0.y * 0.5, i0.y);\r\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y * 0.5, v0.y + o1.y);\r\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\r\n\r\n\t// Compute vectors from v to each of the simplex corners\r\n\tvec2 x0 = x - v0;\r\n\tvec2 x1 = x - v1;\r\n\tvec2 x2 = x - v2;\r\n\r\n\tvec3 iu, iv;\r\n\tvec3 xw, yw;\r\n\r\n\t// Wrap to periods, if desired\r\n\tif(any(greaterThan(period, vec2(0.0)))) {\r\n\t\txw = vec3(v0.x, v1.x, v2.x);\r\n\t\tyw = vec3(v0.y, v1.y, v2.y);\r\n\t\tif(period.x > 0.0)\r\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\r\n\t\tif(period.y > 0.0)\r\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\r\n\t\t// Transform back to simplex space and fix rounding errors\r\n\t\tiu = floor(xw + 0.5*yw + 0.5);\r\n\t\tiv = floor(yw + 0.5);\r\n\t} else { // Shortcut if neither x nor y periods are specified\r\n\t\tiu = vec3(i0.x, i1.x, i2.x);\r\n\t\tiv = vec3(i0.y, i1.y, i2.y);\r\n\t}\r\n\r\n\t// Compute one pseudo-random hash value for each corner\r\n\tvec3 hash = mod(iu, 289.0);\r\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\r\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\r\n\r\n\t// Pick a pseudo-random angle and add the desired rotation\r\n\tvec3 psi = hash * 0.07482 + alpha;\r\n\tvec3 gx = cos(psi);\r\n\tvec3 gy = sin(psi);\r\n\r\n\t// Reorganize for dot products below\r\n\tvec2 g0 = vec2(gx.x,gy.x);\r\n\tvec2 g1 = vec2(gx.y,gy.y);\r\n\tvec2 g2 = vec2(gx.z,gy.z);\r\n\r\n\t// Radial decay with distance from each simplex corner\r\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\r\n\tw = max(w, 0.0);\r\n\tvec3 w2 = w * w;\r\n\tvec3 w4 = w2 * w2;\r\n\r\n\t// The value of the linear ramp from each of the corners\r\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\r\n\r\n\t// Multiply by the radial decay and sum up the noise value\r\n\tfloat n = dot(w4, gdotx);\r\n\r\n\t// Compute the first order partial derivatives\r\n\tvec3 w3 = w2 * w;\r\n\tvec3 dw = -8.0 * w3 * gdotx;\r\n\tvec2 dn0 = w4.x * g0 + dw.x * x0;\r\n\tvec2 dn1 = w4.y * g1 + dw.y * x1;\r\n\tvec2 dn2 = w4.z * g2 + dw.z * x2;\r\n\tgradient = 10.9 * (dn0 + dn1 + dn2);\r\n\r\n\t// Scale the return value to fit nicely into the range [-1,1]\r\n\treturn 10.9 * n;\r\n}", "import { Mesh, PlaneGeometry, ShaderMaterial, Vector2 } from 'three'\nimport three from '../../three'\nimport useCanvasTexture from '../../tools/canvasTexture'\nimport psrdnoise from '../../glsl/psrdnoise2.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst defaultConfig = {\n  colors: [0xffffff, 0x000000],\n  minStroke: 5,\n  maxStroke: 5,\n  timeCoef: 0.0005,\n  coordScale: 2,\n  displacementScale: 0.002,\n  mouseScale: 0.25,\n  mouseLerp: 0.025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const canvasTexture = useCanvasTexture({ width: 1, height: 4096 })\n  drawTexture()\n\n  const uniforms = {\n    uMap: { value: canvasTexture.texture },\n    uTime: { value: 0 },\n    uCoordScale: { value: config.coordScale },\n    uDisplacementScale: { value: config.displacementScale },\n    uMouse: { value: new Vector2() }\n  }\n\n  const geometry = new PlaneGeometry()\n\n  const material = new ShaderMaterial({\n    uniforms,\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uMap;\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uDisplacementScale;\n      uniform vec2 uMouse;\n      varying vec2 vUv;\n      ${psrdnoise}\n      void main() {\n        vec2 p = vec2(0.0);\n        vec2 grad;\n        float n = psrdnoise(vUv * uCoordScale + uMouse, p, uTime, grad);\n        // grad *= uCoordScale;\n        vec2 uv = vUv + uDisplacementScale * grad;\n        gl_FragColor = texture2D(uMap, uv.yx);\n      }\n    `\n  })\n\n  const mesh = new Mesh(geometry, material)\n\n  const mouseTarget = new Vector2()\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: true,\n    initScene ({ camera, scene, wWidth, wHeight }) {\n      mesh.scale.set(wWidth * 2, wHeight * 2, 1)\n      scene.add(mesh)\n\n      camera.position.set(0, -30, 7)\n      camera.lookAt(0, -19, 0)\n    },\n    beforeRender ({ clock }) {\n      uniforms.uTime.value = clock.time * config.timeCoef\n      uniforms.uMouse.value.lerp(mouseTarget, config.mouseLerp)\n    },\n    onPointerMove ({ nPosition }) {\n      mouseTarget.set(-nPosition.x, nPosition.y).multiplyScalar(config.mouseScale)\n    },\n    onPointerLeave () {\n      mouseTarget.set(0, 0)\n    }\n  })\n\n  return { config, uniforms, drawTexture }\n\n  function drawTexture () {\n    const ctx = canvasTexture.ctx\n    ctx.lineWidth = 0\n\n    const { width, height } = canvasTexture.canvas\n    const cscale = colorScale(config.colors)\n\n    let y = 0\n    let dy\n    while (y < height) {\n      dy = config.minStroke + Math.random() * (config.maxStroke - config.minStroke)\n\n      // ctx.strokeStyle = cscale.getColorAt(Math.random()).getStyle()\n      // ctx.lineWidth = dy + 1\n      // ctx.beginPath()\n      // ctx.moveTo(0, y + dy / 2)\n      // ctx.lineTo(width, y + dy / 2)\n      // ctx.stroke()\n      // ctx.closePath()\n\n      ctx.fillStyle = cscale.getColorAt(Math.random()).getStyle()\n      ctx.beginPath()\n      ctx.rect(0, y - 1, width, dy + 1)\n      ctx.fill()\n      ctx.closePath()\n\n      y += dy\n    }\n\n    canvasTexture.texture.needsUpdate = true\n  }\n}\n", "import { Color, DoubleSide, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'directional', params: [0xffffff, 1], props: { position: [0, 10, 0] } }\n  ],\n  wingsScale: [1, 1, 1],\n  wingsWidthSegments: 8,\n  wingsHeightSegments: 8,\n  wingsSpeed: 0.75,\n  wingsDisplacementScale: 1.25,\n  noiseCoordScale: 0.01,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 100,\n  attractionRadius2: 150,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.wingsWidthSegments) || config.wingsWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid wingsWidthSegments ${config.wingsWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uWingsScale = { value: new Vector3(...config.wingsScale) }\n  const uWingsSpeed = { value: config.wingsSpeed }\n  const uWingsDisplacementScale = { value: config.wingsDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uWingsScale, uWingsSpeed, uWingsDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 50, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uWingsSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uWingsSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 2, config.wingsWidthSegments, config.wingsHeightSegments).rotateX(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        WINGS_WIDTH_SEGMENTS: config.wingsWidthSegments,\n        WINGS_HEIGHT_SEGMENTS: config.wingsHeightSegments,\n        WINGS_DX: (2.0 / config.wingsWidthSegments).toFixed(10),\n        WINGS_DZ: (2.0 / config.wingsHeightSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uWingsScale;\n        uniform float uWingsDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n\n        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n          vec3 z = target - origin;\n          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n          z = normalize(z);\n          vec3 x = cross(up, z);\n          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n            if (abs(up.z) == 1.0) { z.x += 0.0001; }\n            else { z.z += 0.0001; }\n            x = cross(up, z);\n          }\n          x = normalize(x);\n          vec3 y = cross(z, x);\n          return mat3(x, y, z);\n        }\n\n        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n          return mat4(\n            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n            pos.x, pos.y, pos.z, 1.0\n          );\n        }\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uWingsScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dx = abs(transformed.x);\n        if (dx > 0.0) {\n          float sdx = smoothstep(0.0, 1.0 + WINGS_DX, dx);\n          #if WINGS_HEIGHT_SEGMENTS > 1\n            float dz = transformed.z + 1.0;\n            float sdz = smoothstep(0.0, 2.0 + WINGS_DZ, dz);\n            transformed.y = sin(vVel.w - sdx + sdz) * sdx * uWingsDisplacementScale;\n          #else\n            transformed.y = sin(vVel.w - sdx) * sdx * uWingsDisplacementScale;\n          #endif\n\n          #ifdef COMPUTE_NORMALS\n            #if WINGS_HEIGHT_SEGMENTS > 1\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float sdz1 = smoothstep(0.0, 2.0 + WINGS_DZ, dz + WINGS_DZ);\n              float dvy1 = sin(vVel.w - sdx + sdz1) * sdx * uWingsDisplacementScale - transformed.y;\n              float dvy2 = sin(vVel.w - sdx1 + sdz) * sdx1 * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, dvy1, s * WINGS_DZ);\n              vec3 v2 = vec3(s * WINGS_DX, dvy2, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #else\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float dvy1 = sin(vVel.w - sdx1) * sdx * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, 0.0, s);\n              vec3 v2 = vec3(s * WINGS_DX, dvy1, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #endif  \n          #endif\n        }\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(150)\n      posArray[k + 1] = rndFS(150)\n      posArray[k + 2] = rndFS(150)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = rndFS(0.5)\n      velArray[k + 1] = rndFS(0.5)\n      velArray[k + 2] = rndFS(0.5)\n      velArray[k + 3] = 0\n    }\n  }\n}\n", "import { BoxGeometry, BufferGeometry, CapsuleGeometry, Color, ConeGeometry, DoubleSide, Float32BufferAttribute, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshStandardMaterial, OctahedronGeometry, SphereGeometry, Vector2, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 256,\n  bloomStrength: 1.5,\n  bloomRadius: 0.5,\n  bloomThreshold: 0.25,\n  colors: [Math.random() * 0xffffff, Math.random() * 0xffffff, Math.random() * 0xffffff],\n  geometry: 'custom',\n  geometryScale: [1, 1, 1],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'point', params: [0xffffff, 1], props: { position: [0, 0, 0] } },\n    { type: 'point', params: [0xff9060, 0.75], props: { position: [0, -100, -100] } },\n    { type: 'point', params: [0x6090ff, 0.75], props: { position: [0, 100, 100] } }\n  ],\n  materialParams: {},\n  noiseCoordScale: 0.01,\n  noiseIntensity: 0.0025,\n  noiseTimeCoef: 0.0004,\n  attractionRadius1: 150,\n  attractionRadius2: 250,\n  maxVelocity: 0.25\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uScale = { value: new Vector3(...config.geometryScale) }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uMouse = { value: new Vector3() }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uScale, uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uMouse }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let effectComposer\n  let renderPass, bloomPass\n\n  let camera\n  let geometry, material, iMesh\n\n  // const mousePlane = new Plane(new Vector3(0, 0, 1), 0)\n  // const mousePosition = new Vector3()\n  // const raycaster = new Raycaster()\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: false,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera (three) {\n      camera = three.camera\n      camera.position.z = 70\n    },\n    initScene ({ renderer, width, height, camera, scene }) {\n      initScene(scene)\n\n      renderPass = new RenderPass(scene, camera)\n      bloomPass = new UnrealBloomPass(new Vector2(width, height), config.bloomStrength, config.bloomRadius, config.bloomThreshold)\n      effectComposer = new EffectComposer(renderer)\n      effectComposer.addPass(renderPass)\n      effectComposer.addPass(bloomPass)\n    },\n    afterResize ({ width, height }) {\n      if (effectComposer) effectComposer.setSize(width, height)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n      // uMouse.value.copy(mousePosition)\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    },\n    render () {\n      effectComposer.render()\n    }\n    // onPointerMove ({ nPosition }) {\n    //   raycaster.setFromCamera(nPosition, camera)\n    //   camera.getWorldDirection(mousePlane.normal)\n    //   raycaster.ray.intersectPlane(mousePlane, mousePosition)\n    // },\n    // onPointerLeave () {\n    //   mousePosition.set(0, 0, 0)\n    // }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        vel.xyz += (pos.w * 0.75) * grad * uNoiseIntensity;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    switch (config.geometry) {\n      case 'box' :\n        geometry = new BoxGeometry()\n        break\n      case 'capsule' :\n        geometry = new CapsuleGeometry(0.2, 1, 4, 8).rotateX(Math.PI / 2)\n        break\n      case 'cone' :\n        geometry = new ConeGeometry(0.4, 2, 6).rotateX(Math.PI / 2)\n        break\n      case 'octahedron':\n        geometry = new OctahedronGeometry(1, 0).rotateX(Math.PI / 2)\n        break\n      case 'sphere' :\n        geometry = new SphereGeometry(0.5, 8, 8)\n        break\n      default:\n        geometry = customGeometry(1)\n    }\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    let index = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[index++] = i / (WIDTH - 1)\n        gpuUvs[index++] = j / (WIDTH - 1)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n\n    material = new MeshStandardMaterial({\n      metalness: 0.75,\n      roughness: 0.25,\n      side: DoubleSide,\n      ...config.materialParams,\n      onBeforeCompile: shader => {\n        Object.keys(uniforms).forEach(key => {\n          shader.uniforms[key] = uniforms[key]\n        })\n        shader.vertexShader = `\n          uniform sampler2D uTexturePosition;\n          uniform sampler2D uOldTexturePosition;\n          uniform sampler2D uTextureVelocity;\n          uniform vec3 uScale;\n          attribute vec2 gpuUv;\n          varying vec4 vPos;\n          varying vec4 vVel;\n\n          mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n            vec3 z = target - origin;\n            if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n            z = normalize(z);\n            vec3 x = cross(up, z);\n            if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n              if (abs(up.z) == 1.0) { z.x += 0.0001; }\n              else { z.z += 0.0001; }\n              x = cross(up, z);\n            }\n            x = normalize(x);\n            vec3 y = cross(z, x);\n            return mat3(x, y, z);\n          }\n\n          mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n            return mat4(\n              rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n              rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n              rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n              pos.x, pos.y, pos.z, 1.0\n            );\n          }\n        ` + shader.vertexShader\n        shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', `\n          vPos = texture2D(uTexturePosition, gpuUv);\n          vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n          vVel = texture2D(uTextureVelocity, gpuUv);\n\n          mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n          mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uScale);\n\n          vec3 transformedNormal = objectNormal;\n          mat3 m = mat3(im);\n          transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n          transformedNormal = m * transformedNormal;\n          transformedNormal = normalMatrix * transformedNormal;\n        `)\n        shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n          vec4 mvPosition = modelViewMatrix * im * vec4(transformed, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n        `)\n      }\n    })\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  /**\n   */\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const dummy = new Vector3()\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(config.attractionRadius1 * 2))\n      dummy.toArray(posArray, k)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      // dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(0.1)\n      dummy.set(0, 0, 0)\n      dummy.toArray(velArray, k)\n      velArray[k + 3] = 0\n    }\n  }\n}\n\nfunction customGeometry (size) {\n  const vertices = [\n    { p: [size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [-size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [0, 0, size], n: [0, 1, 0] },\n    { p: [0, -size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, 0, size], n: [1, 0, 0] }\n  ]\n\n  const indexes = [0, 1, 2, 3, 4, 5]\n\n  const positions = []\n  const normals = []\n  for (const vertex of vertices) {\n    positions.push(...vertex.p)\n    normals.push(...vertex.n)\n  }\n\n  const geometry = new BufferGeometry()\n  geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n  geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n  geometry.setIndex(indexes)\n\n  return geometry\n}\n", "import { Color, DoubleSide, FogExp2, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'directional', params: [0xffffff, 0.5], props: { position: [20, 50, 100] } }\n  ],\n  fogDensity: 0.01,\n  fishScale: [1, 1, 1],\n  fishWidthSegments: 8,\n  fishSpeed: 1.5,\n  fishDisplacementScale: 0.2,\n  noiseCoordScale: 0.02,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 50,\n  attractionRadius2: 100,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.fishWidthSegments) || config.fishWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid fishWidthSegments ${config.fishWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uFishScale = { value: new Vector3(...config.fishScale) }\n  const uFishSpeed = { value: config.fishSpeed }\n  const uFishDisplacementScale = { value: config.fishDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uFishScale, uFishSpeed, uFishDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 20, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uFishSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uFishSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n      if (config.fogDensity) scene.fog = new FogExp2(config.background, config.fogDensity)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 1, config.fishWidthSegments, 1).rotateY(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        FISH_DZ: (2.0 / config.fishWidthSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uFishScale;\n        uniform float uFishDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n\n        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n          vec3 z = target - origin;\n          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n          z = normalize(z);\n          vec3 x = cross(up, z);\n          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n            if (abs(up.z) == 1.0) { z.x += 0.0001; }\n            else { z.z += 0.0001; }\n            x = cross(up, z);\n          }\n          x = normalize(x);\n          vec3 y = cross(z, x);\n          return mat3(x, y, z);\n        }\n\n        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n          return mat4(\n            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n            pos.x, pos.y, pos.z, 1.0\n          );\n        }\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uFishScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dz = transformed.z + 1.0;\n        float sdz = smoothstep(2.0, 0.0, dz);\n        transformed.x += sin(vVel.w + dz * PI * 1.5) * sdz * uFishDisplacementScale;\n\n        #ifdef COMPUTE_NORMALS\n          float dz1 = dz - 0.2;\n          float sdz1 = smoothstep(2.0, 0.0, dz1);\n          float dx1 = sin(vVel.w + dz1 * PI * 1.5) * sdz1 * uFishDisplacementScale - transformed.x;\n          vec3 v1 = vec3(dx1, 0.0, -FISH_DZ);\n          vec3 v2 = vec3(0.0, 1.0, 0.0);\n          transformedNormal = normalize(cross(v1, v2));\n        #endif\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(100)\n      posArray[k + 1] = rndFS(100)\n      posArray[k + 2] = rndFS(100)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = rndFS(0.5)\n      velArray[k + 1] = rndFS(0.5)\n      velArray[k + 2] = rndFS(0.5)\n      velArray[k + 3] = 0\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
